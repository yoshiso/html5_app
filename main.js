// Generated by CoffeeScript 1.6.1
(function() {

  $(function() {
    var canvas, canvasController, video,
      _this = this;
    window.App = {
      CanvasController: {},
      ImageProcessingEngine: {}
    };
    App.CanvasController = (function() {

      function CanvasController(video, canvas) {
        var _this = this;
        this.video = video;
        this.canvas = canvas;
        this.renderCanvas = function() {
          return CanvasController.prototype.renderCanvas.apply(_this, arguments);
        };
        this.checkMedia();
        navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.getUserMedia;
        window.URL = window.URL || window.webkitURL;
        this.ctx = this.canvas.getContext('2d');
        navigator.getUserMedia({
          video: true
        }, function(stream) {
          _this.localMediaStream = stream;
          return _this.video.src = window.URL.createObjectURL(_this.localMediaStream);
        }, function(err) {
          alert('error');
          return console.log(err);
        });
        console.log(this.localMediaStream);
      }

      CanvasController.prototype.hasGetUserMedia = function() {
        return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
      };

      CanvasController.prototype.videoStart = function() {
        this.video.play();
        return this.timer = setInterval(this.renderCanvas, 100);
      };

      CanvasController.prototype.videoStop = function() {
        this.localMediaStream.stop();
        return clearInterval(this.timer);
      };

      CanvasController.prototype.getImageData = function() {
        return this.ctx.getImageData(0, 0, this.video.videoWidth, this.video.videoHeight);
      };

      CanvasController.prototype.renderCanvas = function() {
        this.canvas.height = this.video.videoHeight;
        this.canvas.width = this.video.videoWidth;
        return this.ctx.drawImage(this.video, 0, 0);
      };

      CanvasController.prototype.checkMedia = function() {
        if (this.hasGetUserMedia()) {
          return console.log('カメラOk');
        } else {
          return alert('カメラが使用できません');
        }
      };

      return CanvasController;

    })();
    App.ImageProcessingEngine = (function() {

      function ImageProcessingEngine(image) {
        this.image = image;
        this.image;
      }

      return ImageProcessingEngine;

    })();
    video = $('#video')[0];
    canvas = $('#canvas')[0];
    canvasController = new App.CanvasController(video, canvas);
    $('#start').click(function() {
      return canvasController.videoStart();
    });
    return $('#stop').click(function() {
      return canvasController.videoStop();
    });
  });

}).call(this);
